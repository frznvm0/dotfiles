#!/bin/sh

### Visual config

barbg='#003f3e3b'
barfg='#ffd4d5d0'
barfont='-benis-lemon-medium-r-normal--10-*-*-*-*-*-*-*'

dkblu='#ff142936'

### Functions

# ALSA volume
volume(){
  local vol="$(amixer -M get Master | sed -r '1,4d;s/.*\[([0-9]+%).*/\1/')"

  if [ "$vol" == "0%" ] || [ "" ]; then
    echo -e "%{F#ff3e999f}\u2b9d%{F-} $vol%"
  else
    echo -e "%{F#ff3e999f}\u2b9f%{F-} $vol%"
  fi
}

#  Network status
network(){
  local ifcs="$(ip -o link show up | sed -r '/lo/d;s/.+: ([a-z0-9]+):.*/\1/')"

  if ip link show dev wlan0 up &>/dev/null; then
    local dbm="$(iw dev wlan0 link | sed -nr '/signal/s/.*: -([0-9]+).*/\1/p')"
    if [ ${dbm:-1000} -lt 66 ]; then echo -en "\u2bb7 "
    elif [ ${dbm:-1000} -lt 71 ]; then echo -en "\u2bb8 "
    else echo -en "\u2bb9 "
    fi
    iw dev wlan0 link | sed -nr '/SSID/s/.+: (.+)/\1/p'
  elif [ -n "$ifcs" ]; then
    echo -e "\u21f2 $(echo $ifcs | tr \\n \ )" # \u2794
  else
    echo -e "offline"
  fi
}

# Battery state
battery(){
  local reading="$(acpi -b | sed -r 's/.*,\s([0-9]+%).*/\1/')"

  if (acpi -a | grep -q on-line); then
    echo -e "%{F#ff99ad6a}\u2b92%{F-} $reading%"
  elif [ $(echo $reading | tr -d %) -gt 30 ]; then
    echo -e "%{F#ffeab700}\u2b8f%{F-} $reading%"
  else
    echo -e "%{F#ffc82829}\u2b90%{F-} $reading%"
  fi
}

# CPU usage
cpu(){
  local used=$(dstat --cpu24 1 1 | awk 'NR==4 {print 100 - $3}')
  echo -e "%{F#ffdd9c3c}\u2ba6 $used%%%{F-}"
}

# Free memory
mem(){
  echo -e "%{F#ff99ad6a}\u2ba1 $(free -m | awk '/^Mem/ {print $4}') MiB%{F-}"
}

# Clock
clock(){
  echo -en "\u2b96 "
  date +"%H:%M · %Y-%m-%d"
}

# Remove B,k,M suffixes
unsuffix(){
  case ${1: -1} in
    B) echo ${1%?} ;;
    k) echo ${1%?} \* 1000 | bc ;;
    M) echo ${1%?} \* 1000000 | bc ;;
    *) echo $1 ;;
  esac
}

### Check instance, setup signals and create socket

[ $(pgrep -cx panel) -gt 1 ] && echo "[panel] already running." >&2 && exit 1

trap 'trap - TERM; kill 0' INT TERM QUIT
trap 'exec $0' USR1

FIFO="/tmp/panel-${UID}.fifo"
[ -e "$FIFO" ] && rm -f "$FIFO"
mkfifo "$FIFO"

### Panel content

bspc control --subscribe > "$FIFO" &

dstat -n 1 |
  sed -ur '1,2d;s/^\s+([0-9BkM]+)\s+([0-9BkM]+)/N\1 \2/' > "$FIFO" &

while true; do
  echo -e "L$(cpu)  $(mem) "
  echo -e "R%{B$dkblu} $(network)  $(volume)  $(battery)  $(clock) %{B-}"
  sleep 0.5s
done > "$FIFO" &

### Output loop

recv=(0 0 0 0 0 0 0 0 0 0)
send=(0 0 0 0 0 0 0 0 0 0)

while read -r line; do
  case "$line" in
    L*) left="${line:1}" ;;
    R*) right="${line:1}" ;;
    N*)
      for amount in $line; do
        if [ ${amount:0:1} == "N" ]; then
          recv=("${recv[@]:1}")
          recv[9]=$(unsuffix ${amount:1})
        else
          send=("${send[@]:1}")
          send[9]=$(unsuffix $amount)
        fi
      done

      netstat="%{F#ff5f819d}$(spark ${recv[*]})%{F-}  "
      netstat+="%{F#ff5e8d87}$(spark ${send[*]})%{F-}"
      ;;
    W*)
      monitors=()

      for item in ${line//:/ }; do
        tag="%{A:bspc desktop -f ${item:1}:}"

        case $item in
          M*|m*) [ -z "$mon" ] && mon=0 || ((mon++)) ;;
          O*|F*) monitors[$mon]+="$tag●%{A} " ;;
          o*) monitors[$mon]+="$tag○%{F-}%{A} " ;;
          f*) monitors[$mon]+="$tag%{F$dkblu}○%{F-}%{A} " ;;
          L*)
            [ ${item:1} == tiled ] &&
              layout="\u2b99" ||
              layout="\u25a0"
            ;;
        esac
      done
      ;;
  esac

  for tags in "${monitors[@]}"; do
    cmd="bspc desktop focused -l next"
    toggler="%{B$dkblu}%{R}%{A:$cmd:} $layout %{A}%{R}"
    echo -en "%{l}$toggler $left  $netstat %{B-}%{c}$tags %{r}$right%{S+}"
  done
  echo
done < "$FIFO" | bar -g x16++ -u 2 -B "$barbg" -F "$barfg" -f "$barfont" | sh -
